<?xml version="1.0"?>
<launch>
        <!-- ================================================================================-->
        <!-- =              ur_modern_driver specific                                       =-->
        <!-- ================================================================================-->
        <!-- GDB functionality -->
        <arg name="debug" default="false" />
        <arg unless="$(arg debug)" name="launch_prefix" value="" />
        <arg     if="$(arg debug)" name="launch_prefix" value="gdb --ex run --args" />

        <arg name="robot_ip" default="ids-ur10"/>
        <arg name="limited" default="false"/>
        <arg name="min_payload"  default="0.0"/>
        <arg name="max_payload"  default="5.0"/>
        <arg name="prefix" default="ur10" />
        <arg name="max_velocity" default="10.0"/> <!-- [rad/s] -->
        <arg name="base_frame" default="$(arg prefix)base" />
        <arg name="tool_frame" default="$(arg prefix)tool0" />
        <arg name="endeffector_frame" default="ur10_tool0"/>

        <arg name="sim" default="false"/>
        <arg name="with_ros_control" default="true" />

        <arg name="use_ur_modern_driver" default="false"/>
        
        <arg name="gripper_trajectory_controller_name" default="gripper_pos_based_traj_controller" />

        <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
                <param name="publish_frequency" type="double" value="50.0" />
                <param name="tf_prefix" type="string" value="" />
                <param name="use_tf_static" value="false" />
        </node>

        <group if="$(arg sim)" >
          <!-- Load controller configuration -->
          <rosparam file="$(find sim2log_motek)/etc/controller_ur_modern.yaml" command="load"></rosparam>

          <param name="generic_hw_control_loop/loop_hz" value="100" />
          <param name="generic_hw_control_loop/cycle_time_error_threshold" value="0.03" />
          <param name="hardware_interface/sim_control_mode" value="0" />
          <rosparam file="$(find sim2log_motek)/etc/ur_modern_driver.yaml" command="load" />

          <!-- Load hardware interface -->
          <node name="sim_hardware_interface" pkg="ros_control_boilerplate" type="sim_hw_main" output="screen" launch-prefix="$(arg launch_prefix)" />

          <!-- Spawn controllers -->

          <node name="running_controller_spawner" pkg="controller_manager" type="spawner" args="joint_state_controller joint_trajectory_controller" output="screen"/>

        </group>

        <group unless="$(arg sim)" >
          <!-- Load hardware interface -->

          <group if="$(arg use_ur_modern_driver)" >
            <node name="ur_hardware_interface" pkg="ur_modern_driver" type="ur_driver" output="screen" launch-prefix="$(arg launch_prefix)">
                    <param name="robot_ip_address" type="str" value="$(arg robot_ip)"/>
                    <param name="min_payload" type="double" value="$(arg min_payload)"/>
                    <param name="max_payload" type="double" value="$(arg max_payload)"/>
                    <param name="max_velocity" type="double" value="$(arg max_velocity)"/>
                    <param name="use_ros_control" type="bool" value="$(arg with_ros_control)"/>
                    <param name="servoj_gain" type="double" value="750" />
                    <param name="servo_time" type="double" value="0.008" />
                    <param name="prefix" value="$(arg prefix)" />
                    <param name="base_frame" type="str" value="$(arg base_frame)"/>
                    <param name="tool_frame" type="str" value="$(arg tool_frame)"/>
            </node>

            <!-- Load controller settings for the ur_modern_driver -->
            <rosparam file="$(find ur_modern_driver)/config/ur10_controllers.yaml" command="load"></rosparam>

            <!-- Load Cartesian controllers for testing -->
            <rosparam file="$(find shared_workspace_launch)/etc/controller_ur_modern.yaml" command="load"></rosparam>
          </group>

          <group unless="$(arg use_ur_modern_driver)" >

            <!-- TODO:    base_frame and tool_frame parameters?   -->

            <arg name="controller_config_file" default="$(find ur_rtde_driver)/config/ur10_controllers.yaml"/>
            <arg name="kinematics_config" default="$(find ids_ur_launch)/calibrations/ids-ur10-3_calibration.yaml"/>
            <arg name="controllers" default="joint_trajectory_controller joint_state_controller speed_scaling_state_controller force_torque_sensor_controller"/>
            <include file="$(find ur_rtde_driver)/launch/ur_control.launch">
              <arg name="debug" value="$(arg debug)"/>
              <arg name="use_tool_communication" value="false"/>
              <arg name="controller_config_file" value="$(arg controller_config_file)"/>
              <arg name="robot_ip" value="$(arg robot_ip)"/>
              <arg name="kinematics_config" value="$(arg kinematics_config)"/>
              <arg name="tf_prefix" value="$(arg prefix)"/>
              <arg name="controllers" value="$(arg controllers)"/>
            </include>

            <!-- Load custom Cartesian and joint trajectory controller settings -->
            <rosparam file="$(find shared_workspace_launch)/etc/controller_rtde.yaml" command="load"></rosparam>
          </group>

          <!-- Spawn controllers. The controller manager is loaded separately through the ur_modern_driver -->

          <group if="$(arg use_ur_modern_driver)" >
            <node name="active_controller_spawner" pkg="controller_manager" type="spawner" args="joint_state_controller joint_trajectory_controller" respawn="false" output="screen"/>
            <!-- already happens inside ur_control!  node name="active_controller_spawner" pkg="controller_manager" type="spawner" args="joint_state_controller scaled_pos_traj_controller speed_scaling_state_controller force_torque_sensor_controller" respawn="false" output="screen"/ -->
          </group>

        </group>
        
        <!-- Motion pipeline -->
        <include file="$(find motion_launch)/launch/motion_pipeline.launch" >
          <arg name="controller_namespace" value="/joint_trajectory_controller" />
          <arg name="trac_ik_chain_end" value="$(arg endeffector_frame)" />
          <arg name="debug" value="$(arg debug)" />
          <arg name="trajectory_folder" value="$(find sim2log_motek)/trajectories" />
          <arg name="pose_publishing_rate" value="400"/>
          <arg name="robot_control_reference_frame" value="ur10_base_link"/>
        </include>

        <!-- ================================================================================-->
        <!-- =              general setup                                                   =-->
        <!-- ================================================================================-->

        <group ns="gripper_control_node">
            <group if="$(arg sim)" >
                <!-- simulation with ros control boilerplate -->
                <param name="generic_hw_control_loop/loop_hz" value="100" />
                <param name="generic_hw_control_loop/cycle_time_error_threshold" value="0.03" />
                <!-- Load hardware interface -->
                <node name="gripper_sim_hardware_interface" pkg="ros_control_boilerplate" type="sim_hw_main"
                    output="screen">
                <remap from="joint_states" to="/joint_states"/>
                </node>
                <param name="hardware_interface/sim_control_mode" value="0" />
                <!-- Load Hardware Configuration -->
                <rosparam file="$(find sim2log_motek)/etc/gripper_sim_boilerplate.yaml" command="load"></rosparam>
            </group>
        
            <!-- ROS_Control Controllers -->
            <rosparam file="$(find sim2log_motek)/etc/gripper_controllers.yaml" command="load"/>
            <node name="gripper_controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
                    output="screen" args="--timeout 90 gripper_joint_state_controller $(arg gripper_trajectory_controller_name)"/>
        </group>

</launch>
