#!/usr/bin/env python
import roslib
import rospy

import tf

from geometry_msgs.msg import PoseStamped
from box_info_msgs.msg import BoxInformationStamped

x_min = 0.3
x_max = 0.5
y_min = -0.7
y_max = -0.3
z_min = 0.3
z_max = 0.4


def clamp(val, minv, maxv):
    return minv if val < minv else maxv if val > maxv else val

def boxInfoCallback(data):
    pose_msg = data.pose_stamped

    tf_listener = tf.TransformListener()

    tf_listener.waitForTransform(pose_msg.header.frame_id, "ur10_base_link", rospy.Time(), rospy.Duration(4.0))
    target_pose = tf_listener.transformPose("ur10_base_link", pose_msg)

    quaternion = tf.transformations.quaternion_from_euler(3.14, 0, 1.57)

    target_pose.pose.position.x = clamp(target_pose.pose.position.x, x_min, x_max)
    target_pose.pose.position.y = clamp(target_pose.pose.position.y, y_min, y_max)
    target_pose.pose.position.z = clamp(target_pose.pose.position.z, z_min, z_max)

    target_pose.pose.orientation.x = quaternion[0]
    target_pose.pose.orientation.y = quaternion[1]
    target_pose.pose.orientation.z = quaternion[2]
    target_pose.pose.orientation.w = quaternion[3]

    pose_pub.publish(target_pose)


if __name__ == '__main__':
    rospy.init_node('target_publisher')

    pose_pub = rospy.Publisher('target_frame', PoseStamped, queue_size=10)
    box_sub = rospy.Subscriber('tp_box_pose', BoxInformationStamped, boxInfoCallback)

    rospy.spin()
